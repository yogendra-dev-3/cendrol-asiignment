{"version":3,"sources":["components/CategoryItem/index.js","components/JokesContainer/index.js","App.js","index.js"],"names":["CategoryItem","props","category","_useState","useState","_useState2","_slicedToArray","joke","setJoke","_useState3","_useState4","isLoading","setIsLoading","getRandomJoke","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","data","wrap","_context","prev","next","concat","fetch","sent","json","value","stop","apply","arguments","useEffect","Category","charAt","toUpperCase","slice","_jsx","Popup","trigger","_jsxs","className","children","modal","close","type","onClick","GiCancel","FadeLoader","color","loading","size","JokesContainer","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","length","args","Array","_key","call","state","categories","getCategories","setState","_createClass","key","this","_this$state","ScaleLoader","map","each","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddcaec61.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nimport Popup from 'reactjs-popup'\nimport FadeLoader from 'react-spinners/FadeLoader'\nimport {GiCancel} from 'react-icons/gi'\nimport 'reactjs-popup/dist/index.css'\nimport './index.css'\n\nconst CategoryItem = props => {\n  // get the category value from props\n  const {category} = props\n  const [joke, setJoke] = useState('')\n  const [isLoading, setIsLoading] = useState(true)\n\n  const getRandomJoke = async () => {\n    // set isLoading state to true before fetching a random joke\n    setIsLoading(true)\n    const url = `https://api.chucknorris.io/jokes/random?category=${category}`\n    const response = await fetch(url)\n    const data = await response.json()\n\n    // set the joke received from the API response in the state\n    setJoke(data.value)\n\n    // set isLoading state to false after fetching the joke\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    // fetch a random joke whenever the category changes\n    getRandomJoke()\n  }, [category])\n\n  const loading = true\n  const color = 'white'\n  const Category = category.charAt(0).toUpperCase() + category.slice(1)\n\n  return (\n    <Popup\n      trigger={\n        // popup will be triggered whenever joke-box is clicked\n        <div className=\"joke-box\">\n          <h1 className=\"category\">{Category}</h1>\n          <p className=\"text\">Unlimited Jokes on {category}</p>\n        </div>\n      }\n      modal\n    >\n      {close => (\n        <div className=\"modal-content\">\n          <button type=\"button\" className=\"close-button\" onClick={close}>\n            <GiCancel className=\"icon\" />\n          </button>\n          <h1 className=\"popup-heading\">{Category}</h1>\n          <div className=\"content-container\">\n            {isLoading ? (\n              // show loader  while fetching next joke\n              <div className=\"loader\">\n                <FadeLoader\n                  color={color}\n                  loading={loading}\n                  size={150}\n                  aria-label=\"Loading Spinner\"\n                  data-testid=\"loader\"\n                />\n              </div>\n            ) : (\n              // display the joke after joke is fetched\n              <p className=\"joke\">{joke}</p>\n            )}\n\n            <button\n              className=\"next-joke-button\"\n              type=\"button\"\n              onClick={getRandomJoke}\n            >\n              Next Joke\n            </button>\n          </div>\n        </div>\n      )}\n    </Popup>\n  )\n}\n\nexport default CategoryItem\n","// import required Components\nimport {Component} from 'react'\nimport ScaleLoader from 'react-spinners/ScaleLoader'\nimport CategoryItem from '../CategoryItem'\nimport './index.css'\n\nclass JokesContainer extends Component {\n  // initialize the state\n  state = {categories: [], isLoading: true}\n\n  componentDidMount() {\n    // get all categories of jokes when component mounts\n    this.getCategories()\n  }\n\n  getCategories = async () => {\n    // set loader as true before data is Fetched\n    this.setState({isLoading: true})\n    const url = 'https://api.chucknorris.io/jokes/categories'\n    const response = await fetch(url)\n    const data = await response.json()\n    // store fetched data in categories state and set isLoading state to false after data is fetched\n    this.setState({categories: data, isLoading: false})\n  }\n\n  render() {\n    const {categories, isLoading} = this.state\n\n    // color of loader\n    const color = 'white'\n    // loader status\n    const loading = true\n\n    return (\n      <div className=\"bg-container\">\n        <h1 className=\"heading\">Chuck Norries</h1>\n        {isLoading ? (\n          // show the loader component if data is still loading\n          <div className=\"loader\">\n            <ScaleLoader\n              color={color}\n              loading={loading}\n              size={150}\n              aria-label=\"Loading Spinner\"\n              data-testid=\"loader\"\n            />\n          </div>\n        ) : (\n          // displaying all the categories of jokes\n          <div className=\"jokes-container\">\n            {categories.map(each => (\n              <CategoryItem category={each} key={each} />\n            ))}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default JokesContainer\n","import JokesContainer from './components/JokesContainer'\n\nconst App = () => <JokesContainer />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}